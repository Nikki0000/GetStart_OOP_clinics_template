Структура приложения для ветиринарной клиники, используя принципы ООП:
1. ClinicMain - основной файл для запуска
2. patients - храняться пациенты клиники (животные)
3. Animal - класс которые описывает паметры для экземпляров класса животных
так же Animal - это ссылочный тип данных
4. clinic - пакет с клиентам клиники (хозяева)
5. Owner - класс который описывает параметры для экземпляра класса хозяев
6. Vaccination - класс которые описывает параметры для экземпляра класса прививки




Модификаторы доступа:
private - модификатор доступа, доступность которого ограничеваеться внутри класса, то есть если внутри Animal ввести переменную с модификатором доступа private, 
эта переменная будет видна только внутри {} в которых она находится  

public - модификатор доступа, доступность которого не органичевается внутри класса

protected - модификатор доступа, органичевает достут видимости, в одном пакете, то есть все что лежит на одном уровне с ним и выше, если будет какая то папка, 
которая вложена глубже, поле с таким модификатором уже не будет видно
Используется при наследовании, если мы наследуем какой то новый класс, от старого, где уже прописана какая то логика, то в этом новом классе, можно обращаться к переменным
с таким модификатором



Конструктор:
У каждого ссылочного типа данных (класса), есть конструктор

Конструктор - это метод, который не имеет названия, и он вызывается первым, при создании экземпляра класса, через ключевое слово new

Если не прописывать конструктор, java по умолчанию создаст пустой бесполезный конструктор - new Animal()

Задача конструктора, проинициализировать класс, положить при создании экземпляра класса, какие то значения

Конструктор возвращает класс внутри которого он находиться (тип возвращаемого значения конструктора = названию класса)

В конструктор, заносяться обязательные данные для заполнения

this.id = id - прописываем внутри конструктора, и говорим, возьми шаблон в которым ты находишься, найди у него поле с названием id (поле которые внутри класса), и положи в это поле
значение которое тебе пришло в аргументах


Перегрузка - это когда есть метод с одним и тем же типом возвращаемого значения (названием класса, именем), но с разными аргументами





getter - геттер - пример:getName - метод который отдает наружу (вне класса) какой то параметр

setter - сеттер - пример:setName - метод который переопределяем какой то параметр'




super() - говорит о том, что нужно идти в родительский класс, и вызвать его конструктор, подсовываем другой конструктор
если есть вызов конструктора класса (super()), он должен всегда идти первым


Переопределение - изменяет повидение родительского метода, в частном случае изменение метод toString которое есть у Object, 
и переопределение метода на возврат значение в другом виде




@Override - обозначает что метод пришел из другого класса, и изменяется его повидение



static - когда передается этот парамет, говориться о том, что поле передается всем классу, и перезаписывает все значения с этим параметром
то есть статичное поле относиться не к экземпляру, а ко всему классу
для всех экзепляров класса, оно будет одно
и когда оно меняется у одного, меняется у всех

статика - относться не к классу, а к шаблону
не статика - относиться к экземпляру, конкретному представителю класса



















